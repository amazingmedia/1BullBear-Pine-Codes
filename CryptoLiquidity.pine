// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © KweeBoss
// Attribute to @Seansnote97 and @HunterAlgos
//@version=5
indicator("1BullBear® - Crypto Liquidity Heatmap", shorttitle="1BB - Liquidity Heatmap", overlay=true, max_bars_back=500, max_lines_count=500, max_boxes_count=500, max_labels_count=500)

string tickerOI = 'BINANCE' + ":" + string(syminfo.basecurrency) + 'USDT.P_OI'
openInterest = request.security(tickerOI, timeframe.period, close)
openInterestDelta = openInterest - nz(openInterest[1])

movingAverage = 60
numOfLines = 500
openInterestDeltaMA = ta.sma(openInterestDelta, movingAverage)
openInterestDeltaAbs = math.abs(openInterestDelta)
openInterestDeltaAbsMA = ta.sma(openInterestDeltaAbs, movingAverage)

openInterestDeltaHigh = (openInterestDeltaAbs >= openInterestDeltaAbsMA * 3.0) and openInterestDelta > 0
openInterestDeltaMedium = (openInterestDeltaAbs >= openInterestDeltaAbsMA * 2.0 and openInterestDeltaAbs < openInterestDeltaAbsMA * 3.0) and openInterestDelta > 0
openInterestDeltaLow = (openInterestDeltaAbs >= openInterestDeltaAbsMA * 1.2 and openInterestDeltaAbs < openInterestDeltaAbsMA * 2.0) and openInterestDelta > 0

openHightLowCloseBy4 = (open + close + high + low) / 4


color5xSell = color.rgb(216, 0 , 50, 90)
color10xSell = color.rgb(216, 0 , 50, 80)
color25xSell = color.rgb(216, 0 , 50, 70)
color50xSell = color.rgb(216, 0 , 50, 60)
color100xSell = color.rgb(216, 0 , 50, 50)
color5xBuy = color.rgb(39, 158, 255, 90)
color10xBuy = color.rgb(39, 158, 255, 80)
color25xBuy = color.rgb(39, 158, 255, 70)
color50xBuy = color.rgb(39, 158, 255, 60)
color100xBuy = color.rgb(39, 158, 255, 50)

var highArray = array.new_line()
var mediumArray = array.new_line()
var lowArray = array.new_line()

histogramColor = color.rgb(216, 217, 218, 80)
localHigh = ta.highest(high, 120)
localLow = ta.lowest(low, 120)
rangeHigh = localHigh * (1 + localHigh / localLow / 10)
rangeLow = localLow * (1 - localHigh / localLow / 10)
rangeHeight = rangeHigh - rangeLow
histogramHeight = rangeHeight / 120

histogramLowList = array.new_float(120, na)
histogramHighList = array.new_float(120, na)
histogramData = array.new_float()
histogramtargetList = array.new_float(120, 0.0)

var Bars = array.new_box(120, na)

for i=0 to 120 - 1
    box.delete(array.get(Bars, i))

f_drawLine(_x1, _x2, _yValue, _lineColor, _style, _width) =>
    line.new(x1=_x1, y1=_yValue, x2=_x2, y2=_yValue, color=_lineColor, style=_style, width=_width)

f_extendArray(_lineArray, _extendLines) =>
    if array.size(_lineArray) > 0
        for _i = array.size(_lineArray) - 1 to 0 by 1

            x2 = line.get_x2(array.get(_lineArray, _i))
            yValue = line.get_y1(array.get(_lineArray, _i))

            if _extendLines or bar_index - 1 == x2 - 1 and not(high > yValue and low < yValue)
                line.set_x2(array.get(_lineArray, _i), bar_index + 1)
                if bar_index == last_bar_index
                    array.push(histogramData, yValue)

f_calculateLeverage100x(_pivotValue, _shortSell) =>
    _shortSell ? _pivotValue * (1 - 0.01) : _pivotValue * (1 + 0.01)

f_calculateLeverage50x( _pivotValue, _shortSell) =>
    _shortSell ? _pivotValue * (1 - 0.02) : _pivotValue * (1 + 0.02)

f_calculateLeverage25x(_pivotValue, _shortSell) =>
    _shortSell ? _pivotValue * (1 - 0.04) : _pivotValue * (1 + 0.04)

f_calculateLeverage10x(_pivotValue, _shortSell) =>
    _shortSell ? _pivotValue * (1 - 0.1) : _pivotValue * (1 + 0.1)

f_calculateLeverage5x(_pivotValue, _shortSell) =>
    _shortSell ? _pivotValue * (1 - 0.2) : _pivotValue * (1 + 0.2)

float yValue = na
int x1 = na
int x2 = na
line l = na

x1 := bar_index
x2 := bar_index


f_append(Array, l) =>
    if array.size(Array) == numOfLines
        line.delete(array.shift(Array))
    array.push(Array, l)

if openInterestDeltaHigh

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color5xBuy, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color5xSell, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color10xBuy, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color10xSell, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color25xBuy, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color25xSell, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color50xBuy, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color50xSell, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color100xBuy, line.style_solid, 5)
    f_append(highArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color100xSell, line.style_solid, 5)
    f_append(highArray, l)

if openInterestDeltaMedium

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color5xBuy, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color5xSell, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color10xBuy, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color10xSell, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color25xBuy, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color25xSell, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color50xBuy, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color50xSell, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color100xBuy, line.style_solid, 3)
    f_append(mediumArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color100xSell, line.style_solid, 3)
    f_append(mediumArray, l)

if openInterestDeltaLow

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color5xBuy, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage5x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color5xSell, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color10xBuy, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage10x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color10xSell, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color25xBuy, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage25x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color25xSell, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color50xBuy, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage50x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color50xSell, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, true)
    l := f_drawLine(x1, x2, yValue, color100xBuy, line.style_solid, 1)
    f_append(lowArray, l)

    yValue := f_calculateLeverage100x( openHightLowCloseBy4, false)
    l := f_drawLine(x1, x2, yValue, color100xSell, line.style_solid, 1)
    f_append(lowArray, l)

f_extendArray(highArray, false)
f_extendArray(mediumArray, false)
f_extendArray(lowArray, false)
if barstate.islast
    for i=0 to array.size(highArray) - 1
        if line.get_y1(array.get(highArray, i)) < rangeLow or line.get_y1(array.get(highArray, i)) > rangeHigh
            line.delete(array.get(highArray, i))

    for i=0 to array.size(mediumArray) - 1
        if line.get_y1(array.get(mediumArray, i)) < rangeLow or line.get_y1(array.get(mediumArray, i)) > rangeHigh
            line.delete(array.get(mediumArray, i))

    for i=0 to array.size(lowArray) - 1
        if line.get_y1(array.get(lowArray, i)) < rangeLow or line.get_y1(array.get(lowArray, i)) > rangeHigh
            line.delete(array.get(lowArray, i))
    
    for i = 0 to 119
        histogramLow = rangeLow + histogramHeight * i
        histogramHigh = rangeLow + histogramHeight * (i + 1)
        array.set(histogramLowList, i, histogramLow)
        array.set(histogramHighList, i, histogramHigh)

    for i = 0 to array.size(histogramData) - 1
        y = array.get(histogramData, i)

        for j = 0 to 119
            histogramLow = array.get(histogramLowList, j)
            histogramHigh = array.get(histogramHighList, j)
            if y >= histogramLow and y <= histogramHigh
                array.set(histogramtargetList, j, array.get(histogramtargetList, j) + 1)

    for i = 0 to 119
        histogramLow = array.get(histogramLowList, i)
        histogramHigh = array.get(histogramHighList, i)
        histogramtarget = array.get(histogramtargetList, i)
        histogramWidth = math.floor((histogramtarget + 0.49) * 2)

        // Draw histograms
        array.set(Bars, i, box.new(left=bar_index + 10, top=histogramHigh, right=bar_index + 10 + histogramWidth, bottom=histogramLow, bgcolor=histogramColor, border_color=color.rgb(216, 217, 218, 90), border_width=1))


else if barstate.islast
    for i=0 to array.size(highArray) - 1
        if line.get_y1(array.get(highArray, i)) < rangeLow or line.get_y1(array.get(highArray, i)) > rangeHigh
            line.delete(array.get(highArray, i))

    for i=0 to array.size(mediumArray) - 1
        if line.get_y1(array.get(mediumArray, i)) < rangeLow or line.get_y1(array.get(mediumArray, i)) > rangeHigh
            line.delete(array.get(mediumArray, i))

    for i=0 to array.size(lowArray) - 1
        if line.get_y1(array.get(lowArray, i)) < rangeLow or line.get_y1(array.get(lowArray, i)) > rangeHigh
            line.delete(array.get(lowArray, i))

